name: Build and Publish Rich

on:
  push:
    branches:
      - taseen
    paths:
      - pyproject.toml
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    environment:
      name: deployment
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          version: 1.3.1
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Build Package
        run: poetry build
      - name: Install devpi-client
        run: pip install devpi-client
      - name: Configure devpi-client
        run: |
          devpi use ${{ secrets.DEVPI_SERVER_URL }}
          devpi login ${{ secrets.DEVPI_USERNAME }} --password=${{ secrets.DEVPI_PASSWORD }}
          devpi use ${{ secrets.DEVPI_USERNAME }}/${{ secrets.DEVPI_INDEX }}
        env:
          DEVPI_SERVER_URL: ${{ secrets.DEVPI_SERVER_URL }}
          DEVPI_USERNAME: ${{ secrets.DEVPI_USERNAME }}
          DEVPI_PASSWORD: ${{ secrets.DEVPI_PASSWORD }}
          DEVPI_INDEX: ${{ secrets.DEVPI_INDEX }}
      - name: Publish Rich to Devpi server
        run: devpi upload --from-dir dist/*
      - name: Extract version
        id: get_version
        run: |
          echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV
        shell: bash
      - name: Create release description
        run: |
          echo "RELEASE_BODY=[${{ env.VERSION }}] - $(date +'%m/%d/%Y')" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
